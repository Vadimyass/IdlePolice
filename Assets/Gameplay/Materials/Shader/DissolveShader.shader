Shader "Custom/DissolveSprite"
{
    Properties
    {
        _MainTex ("Sprite Texture", 2D) = "white" {}   // –¢–µ–∫—Å—Ç—É—Ä–∞ —Å–ø—Ä–∞–π—Ç–∞
        _DissolveTex ("Dissolve Texture", 2D) = "white" {}  // –¢–µ–∫—Å—Ç—É—Ä–∞ —à—É–º–∞
        _Dissolve ("Dissolve Amount", Range(0, 1)) = 0  // –ó–Ω–∞—á–µ–Ω–∏–µ —Ä–∞—Å—Ç–≤–æ—Ä–µ–Ω–∏—è
        _EdgeColor ("Edge Color", Color) = (1,1,1,1)  // –¶–≤–µ—Ç –∫–æ–Ω—Ç—É—Ä–∞
        _EdgeWidth ("Edge Width", Range(0, 0.2)) = 0.05  // –¢–æ–ª—â–∏–Ω–∞ –∫–æ–Ω—Ç—É—Ä–∞
        _Color ("Tint", Color) = (1,1,1,1)  // –¶–≤–µ—Ç –∏–∑ SpriteRenderer
    }

    SubShader
{
    Tags { "RenderType"="Transparent" "Queue"="Transparent" }
    LOD 100
    Blend SrcAlpha OneMinusSrcAlpha
    ZWrite Off   // üîπ –û—Ç–∫–ª—é—á–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ Z-–±—É—Ñ–µ—Ä


        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #include "UnityCG.cginc"

            struct appdata_t
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
                float4 color : COLOR;  // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç SpriteRenderer
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                float4 vertex : SV_POSITION;
                float4 color : COLOR;
            };

            sampler2D _MainTex;
            sampler2D _DissolveTex;
            float _Dissolve;
            float4 _EdgeColor;
            float _EdgeWidth;
            float4 _Color;

            v2f vert (appdata_t v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = v.uv;
                o.color = v.color * _Color;  // –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ —Ü–≤–µ—Ç –∏–∑ SpriteRenderer
                return o;
            }

            fixed4 frag (v2f i) : SV_Target
            {
                float4 mainColor = tex2D(_MainTex, i.uv) * i.color;  // –ë–µ—Ä–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –∏ —Ü–≤–µ—Ç
                float noise = tex2D(_DissolveTex, i.uv).r;  // –¢–µ–∫—Å—Ç—É—Ä–∞ —à—É–º–∞

                // –ö—Ä–∞–π —Ä–∞—Å—Ç–≤–æ—Ä–µ–Ω–∏—è
                float edge = smoothstep(_Dissolve - _EdgeWidth, _Dissolve, noise);

                // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ç—É—Ä
                float4 finalColor = lerp(_EdgeColor, mainColor, edge);
                finalColor.a *= edge;  // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏

                return finalColor;
            }
            ENDCG
        }
    }
}
